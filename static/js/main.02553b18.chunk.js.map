{"version":3,"sources":["logo.svg","utilities/wod.js","App.js","reportWebVitals.js","index.js"],"names":["wodDice","dice","again","auto","builder","successes","sucDice","parseInt","result","Math","floor","random","App","useState","textArea","setTextArea","setDice","setAgain","bonus","setBonus","stopAll","setStopAll","className","onClick","src","logo","alt","htmlFor","id","type","onChange","value","target","readOnly","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"wMAAe,MAA0B,iCCwD1BA,G,MAxDC,SAAUC,EAAMC,EAAOC,GACrC,IAAIC,EAAU,GACVC,EAAY,EACZC,EAAU,EAkBd,IAfEL,EADEA,EACKM,SAASN,EAAM,IAEf,EAGPC,EADEA,EACMK,SAASL,EAAO,IAEhB,GAGRC,EADEA,EACKI,SAASJ,EAAM,IAEf,EAGFF,EAAO,GAAG,CACf,IAAIO,EAASC,KAAKC,MAAsB,GAAhBD,KAAKE,UACd,IAAXH,IACFA,EAAS,IAGPA,GAAU,IACZH,GAAa,GAGXG,GAAUN,IACZD,GAAQ,EACRK,GAAW,GAIXF,GADa,IAAXI,EACSA,EACFA,GAAUN,EACR,KAAOM,EAAS,KAClBA,GAAU,EACR,IAAMA,EAAS,IAEfA,GAGbP,GAAQ,GAEG,IACTG,GAAW,KAIf,OAAOA,EAAU,mBADjBC,GAAaF,GACoC,IAAMG,EAAU,QCuBpDM,MAvEf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEWF,mBAAS,GAFpB,mBAENZ,EAFM,KAEAe,EAFA,OAGaH,mBAAS,IAHtB,mBAGNX,EAHM,KAGCe,EAHD,OAIaJ,mBAAS,GAJtB,mBAINK,EAJM,KAICC,EAJD,OAMiBN,oBAAS,GAN1B,mBAMNO,EANM,KAMGC,EANH,KAYb,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBACEA,UAAS,2BAAsBF,EAAU,OAAS,IAClDG,QAAS,kBAAMF,GAAYD,IAF7B,SAIE,qBACEI,IAAKC,EACLH,UAAS,mBAAcF,EAAU,OAAS,IAC1CM,IAAI,WAGR,sBAAKJ,UAAU,YAAf,UACE,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,cAAf,UACE,uBAAOK,QAAQ,OAAf,4BACA,uBACEC,GAAG,OACHC,KAAK,SACLC,SAAU,gBAAaC,EAAb,EAAGC,OAAUD,MAAb,OAA2Bf,EAAQe,IAC7CA,MAAO9B,OAGX,sBAAKqB,UAAU,eAAf,UACE,uBAAOK,QAAQ,QAAf,qBACA,yBACEC,GAAG,QACHE,SAAU,gBAAaC,EAAb,EAAGC,OAAUD,MAAb,OAA2Bd,EAASc,IAC9CA,MAAO7B,EAHT,UAKE,wBAAQ6B,MAAO,GAAf,gBACA,wBAAQA,MAAO,EAAf,eACA,wBAAQA,MAAO,EAAf,eACA,wBAAQA,MAAO,GAAf,uBAGJ,sBAAKT,UAAU,cAAf,UACE,uBAAOK,QAAQ,QAAf,6BACA,uBACEC,GAAG,QACHC,KAAK,SACLC,SAAU,gBAAaC,EAAb,EAAGC,OAAUD,MAAb,OAA2BZ,EAASY,IAC9CA,MAAOb,OAGX,wBAAQI,UAAU,UAAUC,QAlDzB,WACXR,EAAYf,EAAQC,EAAMC,EAAOgB,KAiDzB,qBAIF,qBAAKI,UAAU,cAAf,SACE,0BAAUS,MAAOjB,EAAUmB,UAAQ,eCxDhCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,EAAgBc,QAAQC,O","file":"static/js/main.02553b18.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.67310f5a.svg\";","const wodDice = function (dice, again, auto) {\r\n  let builder = \"\";\r\n  let successes = 0;\r\n  let sucDice = 0;\r\n\r\n  if (dice) {\r\n    dice = parseInt(dice, 10);\r\n  } else {\r\n    dice = 0;\r\n  }\r\n  if (again) {\r\n    again = parseInt(again, 10);\r\n  } else {\r\n    again = 10;\r\n  }\r\n  if (auto) {\r\n    auto = parseInt(auto, 10);\r\n  } else {\r\n    auto = 0;\r\n  }\r\n\r\n  while (dice > 0) {\r\n    let result = Math.floor(Math.random() * 10);\r\n    if (result === 0) {\r\n      result = 10;\r\n    }\r\n\r\n    if (result >= 8) {\r\n      successes += 1;\r\n    }\r\n\r\n    if (result >= again) {\r\n      dice += 1;\r\n      sucDice += 1;\r\n    }\r\n\r\n    if (result === 1) {\r\n      builder += result;\r\n    } else if (result >= again) {\r\n      builder += \"**\" + result + \"**\";\r\n    } else if (result >= 8) {\r\n      builder += \"*\" + result + \"*\";\r\n    } else {\r\n      builder += result;\r\n    }\r\n\r\n    dice -= 1;\r\n\r\n    if (dice > 0) {\r\n      builder += \",\";\r\n    }\r\n  }\r\n  successes += auto;\r\n  return builder + \"\\n**SUCCESSES: \" + successes + \"(\" + sucDice + \")**\";\r\n};\r\n\r\nexport default wodDice;\r\n","import logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport { useState } from \"react\";\nimport wodDice from \"./utilities/wod\";\n\nfunction App() {\n  const [textArea, setTextArea] = useState(\"\");\n  const [dice, setDice] = useState(1);\n  const [again, setAgain] = useState(10);\n  const [bonus, setBonus] = useState(0);\n\n  const [stopAll, setStopAll] = useState(true);\n\n  const roll = () => {\n    setTextArea(wodDice(dice, again, bonus));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div\n          className={`App-logo-wrapper ${stopAll ? \"stop\" : \"\"}`}\n          onClick={() => setStopAll(!stopAll)}\n        >\n          <img\n            src={logo}\n            className={`App-logo ${stopAll ? \"stop\" : \"\"}`}\n            alt=\"logo\"\n          />\n        </div>\n        <div className=\"main-area\">\n          <div className=\"top-half\">\n            <div className=\"field input\">\n              <label htmlFor=\"dice\">Number of Dice</label>\n              <input\n                id=\"dice\"\n                type=\"number\"\n                onChange={({ target: { value } }) => setDice(value)}\n                value={dice}\n              />\n            </div>\n            <div className=\"field select\">\n              <label htmlFor=\"again\"># again</label>\n              <select\n                id=\"again\"\n                onChange={({ target: { value } }) => setAgain(value)}\n                value={again}\n              >\n                <option value={10}>10</option>\n                <option value={9}>9</option>\n                <option value={8}>8</option>\n                <option value={11}>Off</option>\n              </select>\n            </div>\n            <div className=\"field input\">\n              <label htmlFor=\"bonus\">Bonus Successes</label>\n              <input\n                id=\"bonus\"\n                type=\"number\"\n                onChange={({ target: { value } }) => setBonus(value)}\n                value={bonus}\n              />\n            </div>\n            <button className=\"hexagon\" onClick={roll}>\n              Roll\n            </button>\n          </div>\n          <div className=\"botton-half\">\n            <textarea value={textArea} readOnly />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}